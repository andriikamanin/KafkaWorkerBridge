package it.volta.ts.kamaninandrii.api_service.listener;

import it.volta.ts.kamaninandrii.api_service.model.Message;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

@Component
public class KafkaMessageListener {

    private static final Logger logger = LoggerFactory.getLogger(KafkaMessageListener.class);

    @KafkaListener(topics = "response-topic", groupId = "api-group")
    public void onMessage(Message message) {
        try {
            logger.info("üì• [API] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", message);
            processMessage(message);
        } catch (Exception e) {
            logger.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", message, e);
        }
    }

    private void processMessage(Message message) {
        try {
            logger.info("üîß [API] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {}", message.getContent());

            // –≠–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            String processedData = message.getContent().toUpperCase(); // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–º
            logger.info("‚úÖ [API] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {}", processedData);

            // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å JPA/Repository)
            // messageRepository.save(new ProcessedMessage(processedData));

            // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ REST API
            // restTemplate.postForObject("http://external-service/api/messages", processedData, String.class);

            logger.info("üöÄ [API] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        } catch (Exception e) {
            logger.error("‚ùå [API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", message.getContent(), e);
        }
    }
}