package it.volta.ts.kamaninandrii.worker_service.listener;

import it.volta.ts.kamaninandrii.worker_service.model.Message;
import it.volta.ts.kamaninandrii.worker_service.service.KafkaProducerService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Component;

@Component
public class KafkaMessageListener {

    private static final Logger logger = LoggerFactory.getLogger(KafkaMessageListener.class);
    private final KafkaProducerService kafkaProducerService;

    public KafkaMessageListener(KafkaProducerService kafkaProducerService) {
        this.kafkaProducerService = kafkaProducerService;
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ "worker-topic"
    @KafkaListener(topics = "worker-topic", groupId = "worker-group")
    public void onMessage(Message message) {
        try {
            if (message != null) {
                logger.info("üë®‚Äçüíª [Worker] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", message);
                processMessage(message);
            } else {
                logger.error("‚ùå [Worker] –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            }
        } catch (Exception e) {
            logger.error("‚ùå [Worker] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    private void processMessage(Message message) {
        try {
            logger.info("üîÑ [Worker] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...");

            // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            String processedContent = "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " + message.getContent();
            logger.info("‚úÖ [Worker] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {}", processedContent);

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
            Message responseMessage = new Message(processedContent);

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logger.info("üì§ [Worker] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Kafka: {}", responseMessage);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π Kafka-—Ç–æ–ø–∏–∫
            kafkaProducerService.sendResponse(responseMessage);

            logger.info("üöÄ [Worker] –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
        } catch (Exception e) {
            logger.error("‚ùå [Worker] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }
}